/* The following code was generated by JFlex 1.4.3 on 10/2/11 7:46 PM */

package bem.idea.bemhtml.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Map;
import java.util.HashMap;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/2/11 7:46 PM from the specification file
 */
public class BemHtmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int POST_BM_KEYWORD = 12;
  public static final int POST_BH_KEYWORD_VALUE = 10;
  public static final int JAVASCRIPT_CODE = 14;
  public static final int OPEN_JS_EXPR = 4;
  public static final int YYINITIAL = 0;
  public static final int POST_BH_KEYWORD = 6;
  public static final int BH_KEYWORD_VALUE = 8;
  public static final int PRE_OPEN_JS_EXPR = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\3\1\1\22\0\1\2\1\0\1\4"+
    "\4\0\1\6\1\40\1\41\2\0\1\36\15\0\1\37\6\0\1\30"+
    "\13\0\1\16\15\0\1\42\1\5\1\43\3\0\1\21\1\7\1\12"+
    "\1\17\1\14\1\20\1\24\1\0\1\31\1\27\1\13\1\10\1\15"+
    "\1\33\1\11\2\0\1\25\1\26\1\23\1\22\2\0\1\32\2\0"+
    "\1\34\1\0\1\35\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\11\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\4\30\1\31\1\32\12\0\1\33"+
    "\1\34\11\0\1\33\2\0\1\35\5\0\1\35\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u0120\0\u0120\0\u0120\0\u02ac\0\u0120"+
    "\0\u02d0\0\u02f4\0\u0318\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u033c\0\u0360\0\u0120\0\u0120\0\u0120\0\u0384\0\u0120"+
    "\0\u03a8\0\u0120\0\u03cc\0\u0120\0\u03f0\0\u0414\0\u0438\0\u0120"+
    "\0\u0120\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u0288\0\u02f4\0\u05e8\0\u0318"+
    "\0\u060c\0\u0414\0\u0630\0\u0438\0\u0654\0\u0678\0\u0120\0\u069c"+
    "\0\u06c0\0\u0120\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798"+
    "\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\3\11\1\13\2\11\1\14\1\11\1\15"+
    "\1\16\1\11\1\17\1\11\1\20\1\11\1\21\3\11"+
    "\1\22\4\11\1\23\1\24\1\25\5\11\1\26\3\27"+
    "\40\26\1\30\3\31\1\32\1\30\1\33\25\30\4\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\31\41"+
    "\2\44\1\25\1\45\4\41\1\46\1\42\1\47\31\46"+
    "\2\44\6\46\1\50\1\42\1\51\31\50\2\44\1\25"+
    "\5\50\1\52\1\42\1\53\31\52\2\44\1\25\5\52"+
    "\1\54\3\55\1\56\1\54\1\57\25\54\1\60\1\61"+
    "\6\54\45\0\3\12\50\0\1\62\3\0\1\63\37\0"+
    "\1\64\1\65\42\0\1\66\44\0\1\67\17\0\1\70"+
    "\26\0\1\71\52\0\1\72\41\0\1\73\50\0\1\74"+
    "\15\0\44\75\1\0\3\27\41\0\3\31\40\0\1\76"+
    "\1\0\2\76\1\30\1\77\36\76\1\100\1\0\3\100"+
    "\1\101\1\30\35\100\1\0\1\42\44\0\1\43\43\0"+
    "\1\47\43\0\1\51\43\0\1\53\42\0\3\55\40\0"+
    "\1\102\1\0\2\102\1\54\1\103\36\102\1\104\1\0"+
    "\3\104\1\105\1\54\35\104\11\0\1\106\47\0\1\107"+
    "\54\0\1\107\50\0\1\110\24\0\1\111\46\0\1\112"+
    "\56\0\1\107\31\0\1\113\46\0\1\114\44\0\1\107"+
    "\47\0\1\115\13\0\1\76\1\0\2\76\1\32\1\77"+
    "\36\76\1\100\1\0\3\100\1\101\1\33\35\100\1\102"+
    "\1\0\2\102\1\56\1\103\36\102\1\104\1\0\3\104"+
    "\1\105\1\57\35\104\12\0\1\116\54\0\1\117\35\0"+
    "\1\120\47\0\1\121\47\0\1\64\41\0\1\122\33\0"+
    "\1\112\44\0\1\123\45\0\1\124\47\0\1\125\44\0"+
    "\1\126\53\0\1\127\21\0\1\67\42\0\1\127\60\0"+
    "\1\107\41\0\1\107\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2232];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\12\1\3\11\1\1\1\11\3\1\6\11"+
    "\2\1\3\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\12\0\2\1\11\0\1\11\2\0\1\11"+
    "\5\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int rBraceCounter = 0;
    private int sBraceCounter = 0;
    private int bBraceCounter = 0;
    private int valCounter = 0;
    private boolean isEmpty = true;
    private int postState = YYINITIAL;
    private String context = null;
    private IElementType t = null;
    private IElementType ojseToken = null;

    private static Map<String, int[]> contextValNum;
    private static Map<String, IElementType> tokens;
    static {
        int[] x;
        contextValNum = new HashMap<String, int[]>();
        x = new int[2]; x[0] = 1; x[1] = 1;
        contextValNum.put("block", x);
        contextValNum.put("elem", x);
        contextValNum.put("_js", x);
        x = new int[2]; x[0] = 2; x[1] = 2;
        contextValNum.put("mod", x);
        contextValNum.put("elemMod", x);

        tokens = new HashMap<String, IElementType>();
        tokens.put("block", BemHtmlTokenTypes.KEYWORD_BLOCK);
        tokens.put("elem", BemHtmlTokenTypes.KEYWORD_ELEM);
        tokens.put("mod", BemHtmlTokenTypes.KEYWORD_MOD);
        tokens.put("elemMod", BemHtmlTokenTypes.KEYWORD_ELEMMOD);
        tokens.put("default", BemHtmlTokenTypes.KEYWORD_DEFAULT);
        tokens.put("tag", BemHtmlTokenTypes.KEYWORD_TAG);
        tokens.put("attrs", BemHtmlTokenTypes.KEYWORD_ATTRS);
        tokens.put("cls", BemHtmlTokenTypes.KEYWORD_CLS);
        tokens.put("bem", BemHtmlTokenTypes.KEYWORD_BEM);
        tokens.put("js", BemHtmlTokenTypes.KEYWORD_JS);
        tokens.put("jsAttr", BemHtmlTokenTypes.KEYWORD_JSATTR);
        tokens.put("mix", BemHtmlTokenTypes.KEYWORD_MIX);
        tokens.put("content", BemHtmlTokenTypes.KEYWORD_CONTENT);
        tokens.put("{", BemHtmlTokenTypes.LEFT_BRACE);
        tokens.put("}", BemHtmlTokenTypes.RIGHT_BRACE);
        tokens.put(",", BemHtmlTokenTypes.KEYWORDS_DELIM);
        tokens.put(":", BemHtmlTokenTypes.KEYWORDS_COLON);
    }

    private void initOJSE(String context, IElementType ojseToken) {
        this.ojseToken = ojseToken;
        this.context = context;
        valCounter = 0;
        rBraceCounter = 0;
        sBraceCounter = 0;
        isEmpty = true;
    }

    private void initOJSE(IElementType ojseToken) {
        initOJSE(yytext().toString(), ojseToken);
    }

    private IElementType continueOJSE() {
        isEmpty = false;
        yybegin(OPEN_JS_EXPR);
        return ojseToken;
    }

    private IElementType finalizeOJSE(IElementType stopToken) {
        int[] nn = contextValNum.get(context);
        int min = nn[0];
        int max = nn[1];

        if (!isEmpty) valCounter++;

        if ((isEmpty && min == 0) || (valCounter >= min && valCounter <= max)) {
            yypushback(yytext().length());
            yybegin(postState);
            return null;
        } else if (!isEmpty && valCounter < min && BemHtmlTokenTypes.WHITE_SPACE == stopToken) {
            yybegin(OPEN_JS_EXPR);
            return stopToken;
        } else {
            return invalid();
        }
    }

    private IElementType invalid() {
        yybegin(yystate());
        return BemHtmlTokenTypes.BAD_CHARACTER;
    }

    private boolean isJavaScript() {
        return JavaScriptDetector.isJavaScript(yytext().toString());
    }



  public BemHtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BemHtmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { yybegin(POST_BH_KEYWORD_VALUE); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 30: break;
        case 9: 
          { if (rBraceCounter > 0 || sBraceCounter > 0) { return continueOJSE(); }
                        else {
                            t = finalizeOJSE(tokens.get(yytext().toString()));
                            if (t != null) return t;
                        }
          }
        case 31: break;
        case 25: 
          { bBraceCounter++;
                      yybegin(JAVASCRIPT_CODE); return BemHtmlTokenTypes.JAVASCRIPT_CODE;
          }
        case 32: break;
        case 18: 
          { postState = POST_BH_KEYWORD_VALUE;
                        yypushback(1);
                        initOJSE("_js", BemHtmlTokenTypes.KEYWORDS_VALUE);
                        yybegin(OPEN_JS_EXPR);
          }
        case 33: break;
        case 27: 
          { yybegin(POST_BH_KEYWORD); return tokens.get(yytext());
          }
        case 34: break;
        case 3: 
          { yybegin(YYINITIAL); return BemHtmlTokenTypes.RIGHT_BRACE;
          }
        case 35: break;
        case 11: 
          { rBraceCounter--; return continueOJSE();
          }
        case 36: break;
        case 14: 
          { yybegin(POST_BH_KEYWORD); return BemHtmlTokenTypes.BAD_CHARACTER;
          }
        case 37: break;
        case 4: 
          { yybegin(YYINITIAL); return BemHtmlTokenTypes.KEYWORDS_DELIM;
          }
        case 38: break;
        case 15: 
          { yybegin(POST_BH_KEYWORD); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 39: break;
        case 19: 
          { yybegin(BH_KEYWORD_VALUE); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 40: break;
        case 26: 
          { bBraceCounter--;
                      if (bBraceCounter == 0) { yybegin(YYINITIAL); return BemHtmlTokenTypes.RIGHT_BRACE; }
                      else { yybegin(JAVASCRIPT_CODE); return BemHtmlTokenTypes.JAVASCRIPT_CODE; }
          }
        case 41: break;
        case 8: 
          { if (rBraceCounter > 0 || sBraceCounter > 0) { return continueOJSE(); }
                        else {
                            t = finalizeOJSE(BemHtmlTokenTypes.WHITE_SPACE);
                            if (t != null) return t;
                        }
          }
        case 42: break;
        case 22: 
          { yybegin(POST_BM_KEYWORD); return BemHtmlTokenTypes.BAD_CHARACTER;
          }
        case 43: break;
        case 17: 
          { yybegin(BH_KEYWORD_VALUE); return BemHtmlTokenTypes.KEYWORDS_COLON;
          }
        case 44: break;
        case 24: 
          { yybegin(JAVASCRIPT_CODE); return BemHtmlTokenTypes.JAVASCRIPT_CODE;
          }
        case 45: break;
        case 16: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 46: break;
        case 6: 
          { yybegin(PRE_OPEN_JS_EXPR); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 47: break;
        case 28: 
          { if (isJavaScript()) {
                            bBraceCounter = 1;
                            yypushback(yytext().length() - 1);
                            yybegin(JAVASCRIPT_CODE);
                            return BemHtmlTokenTypes.LEFT_BRACE;
                        } else {
                            yypushback(yytext().length() - 1);
                            yybegin(YYINITIAL);
                            return BemHtmlTokenTypes.LEFT_BRACE;
                        }
          }
        case 48: break;
        case 12: 
          { sBraceCounter++; return continueOJSE();
          }
        case 49: break;
        case 1: 
          { postState = POST_BH_KEYWORD;
                        yypushback(1);
                        initOJSE("_js", BemHtmlTokenTypes.KEYWORDS_VALUE);
                        yybegin(OPEN_JS_EXPR);
          }
        case 50: break;
        case 29: 
          { postState = POST_BM_KEYWORD;
                        initOJSE(BemHtmlTokenTypes.BEM_VALUE);
                        yybegin(PRE_OPEN_JS_EXPR);
                        return tokens.get(yytext());
          }
        case 51: break;
        case 13: 
          { sBraceCounter--; return continueOJSE();
          }
        case 52: break;
        case 5: 
          { yypushback(1); yybegin(OPEN_JS_EXPR);
          }
        case 53: break;
        case 7: 
          { return continueOJSE();
          }
        case 54: break;
        case 20: 
          { yybegin(POST_BH_KEYWORD_VALUE); return BemHtmlTokenTypes.BAD_CHARACTER;
          }
        case 55: break;
        case 2: 
          { yybegin(YYINITIAL); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 56: break;
        case 10: 
          { rBraceCounter++; return continueOJSE();
          }
        case 57: break;
        case 23: 
          { yybegin(POST_BM_KEYWORD); return BemHtmlTokenTypes.WHITE_SPACE;
          }
        case 58: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
